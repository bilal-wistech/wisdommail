<?php

namespace Acelle\Console\Commands;

use Request;
use Carbon\Carbon;
use Acelle\Model\Field;
use Acelle\Model\MailList;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Http;
use Exception;

class SyncMailLists extends Command
{
    protected $signature = 'sync:maillists';
    protected $description = 'Sync mail lists and subscribers with external API';

    public function __construct()
    {
        parent::__construct();
    }

    public function handle()
    {
        try {
            Log::info('Starting mail lists sync process');

            $apiResponse = Http::get('https://britishchamberdubai.com/api/list-names');
            if (!$apiResponse->successful()) {
                throw new Exception('API request failed with status: ' . $apiResponse->status());
            }

            $apiData = json_decode($apiResponse->body(), true);
            if (json_last_error() !== JSON_ERROR_NONE) {
                throw new Exception('Failed to parse API response: ' . json_last_error_msg());
            }

            Log::info('API Data Retrieved Successfully');

            try {
                $this->syncMailLists($apiData);
                Log::info('Mail lists synced successfully');
            } catch (Exception $e) {
                Log::error('Error syncing mail lists: ' . $e->getMessage());
                throw $e;
            }

            $selected_mail_List = DB::table('mail_lists')->get();

            foreach ($selected_mail_List as $mail_list) {
                try {
                    // $this->syncSubscribers($mail_list, $apiData);
                    Log::info("Successfully synced subscribers for list: {$mail_list->name}");
                } catch (Exception $e) {
                    Log::error("Error syncing subscribers for list {$mail_list->name}: " . $e->getMessage());
                }
            }

            Log::info('Mail lists sync process completed successfully');
        } catch (Exception $e) {
            Log::error('Fatal error in sync process: ' . $e->getMessage());
            throw $e;
        }
    }

    private function syncMailLists($apiData)
    {
        try {
            if (MailList::count() == 0) {
                foreach ($apiData['lists'] as $data) {
                    try {
                        $mailListData = [
                            'name' => $data['title'],
                            'uid' => (string) \Illuminate\Support\Str::uuid(),
                            'customer_id' => 1,
                            'contact_id' => $this->get_contact($data),
                            'subscribe_confirmation' => 0,
                            'unsubscribe_notification' => 0,
                            'send_welcome_email' => 0,
                            'from_email' => env('MAIL_FROM_ADDRESS'),
                            'from_name' => 'BILAL',
                        ];

                        MailList::create($mailListData);
                        Log::info("Created new mail list: {$data['title']}");
                    } catch (Exception $e) {
                        Log::error("Error creating mail list {$data['title']}: " . $e->getMessage());
                        throw $e;
                    }
                }
            } else {
                foreach ($apiData['lists'] as $data) {
                    try {
                        $existingRecord = MailList::where('name', $data['title'])->first();

                        if ($existingRecord) {
                            $existingRecord->update(['name' => $data['title']]);
                            Log::info("Updated existing mail list: {$data['title']}");
                        } else {
                            $mailListData = [
                                'name' => $data['title'],
                                'uid' => (string) \Illuminate\Support\Str::uuid(),
                                'customer_id' => 1,
                                'contact_id' => $this->get_contact($data),
                                'subscribe_confirmation' => 0,
                                'unsubscribe_notification' => 0,
                                'send_welcome_email' => 0,
                                'from_email' => env('MAIL_FROM_ADDRESS'),
                                'from_name' => 'BILAL',
                            ];

                            MailList::create($mailListData);
                            Log::info("Created new mail list: {$data['title']}");
                        }
                    } catch (Exception $e) {
                        Log::error("Error processing mail list {$data['title']}: " . $e->getMessage());
                        throw $e;
                    }
                }
            }
        } catch (Exception $e) {
            Log::error('Error in syncMailLists: ' . $e->getMessage());
            throw $e;
        }
    }

    // private function syncSubscribers($mail_list, $apiData)
    // {
    //     try {
    //         switch ($mail_list->name) {
    //             case 'Prospect List':
    //                 if (isset($apiData['prospect_list']) && is_array($apiData['prospect_list'])) {
    //                     foreach ($apiData['prospect_list'] as $prospectData) {
    //                         try {
    //                             if (!isset($prospectData['email'])) {
    //                                 Log::warning("Missing email for prospect ID: {$prospectData['id']}");
    //                                 continue;
    //                             }

    //                             $this->processProspectSubscriber($prospectData, $mail_list);
    //                         } catch (Exception $e) {
    //                             Log::error("Error processing prospect subscriber: " . $e->getMessage());
    //                         }
    //                     }
    //                 } else {
    //                     Log::warning('Prospect list data is missing or invalid');
    //                 }
    //                 break;

    //             case 'News Letter Subscription':
    //                 if (isset($apiData['news_letter_subscription'][0]) && is_array($apiData['news_letter_subscription'][0])) {
    //                     foreach ($apiData['news_letter_subscription'][0] as $newsLetterSubscriptionData) {
    //                         try {
    //                             if (!isset($newsLetterSubscriptionData['email'])) {
    //                                 Log::warning("Missing email for newsletter subscription ID: {$newsLetterSubscriptionData['id']}");
    //                                 continue;
    //                             }

    //                             $this->processNewsletterSubscriber($newsLetterSubscriptionData, $mail_list);
    //                         } catch (Exception $e) {
    //                             Log::error("Error processing newsletter subscriber: " . $e->getMessage());
    //                         }
    //                     }
    //                 } else {
    //                     Log::warning('Newsletter subscription data is missing or invalid');
    //                 }
    //                 break;

    //             case 'All Members':
    //                 if (isset($apiData['all_members_list'][0]) && is_array($apiData['all_members_list'][0])) {
    //                     foreach ($apiData['all_members_list'][0] as $memberData) {
    //                         try {
    //                             if (!isset($memberData['email'])) {
    //                                 Log::warning("Missing email for member ID: {$memberData['id']}");
    //                                 continue;
    //                             }

    //                             $this->processMemberSubscriber($memberData, $mail_list);
    //                         } catch (Exception $e) {
    //                             Log::error("Error processing member subscriber: " . $e->getMessage());
    //                         }
    //                     }
    //                 } else {
    //                     Log::warning('Members list data is missing or invalid');
    //                 }
    //                 break;

    //             case 'Events List':
    //                 if (isset($apiData['event_list'][0]) && is_array($apiData['event_list'][0])) {
    //                     foreach ($apiData['event_list'][0] as $eventData) {
    //                         try {
    //                             if (!isset($eventData['email'])) {
    //                                 Log::warning("Missing email for event ID: {$eventData['event_id']}");
    //                                 continue;
    //                             }

    //                             $this->processEventSubscriber($eventData, $mail_list);
    //                         } catch (Exception $e) {
    //                             Log::error("Error processing event subscriber: " . $e->getMessage());
    //                         }
    //                     }
    //                 } else {
    //                     Log::warning('Event list data is missing or invalid');
    //                 }
    //                 break;

    //             default:
    //                 Log::warning("Unknown mail list type: {$mail_list->name}");
    //                 break;
    //         }
    //     } catch (Exception $e) {
    //         Log::error("Error in syncSubscribers for list {$mail_list->name}: " . $e->getMessage());
    //         throw $e;
    //     }
    // }

    private function get_contact($data)
    {
        try {
            $contactData = [
                "company" => $data['company'] ?? "Stark and Barron Co",
                "phone" => $data['phone'] ?? "+923481234567",
                "email" => auth()->user()->email ?? "sobodip@mailinator.com",
                "zip" => $data['zip'] ?? "58147",
                "state" => $data['state'] ?? "Riverside Province",
                "city" => $data['city'] ?? "Sialkot",
                "address_1" => $data['address_1'] ?? "Address 1",
                "address_2" => $data['address_2'] ?? "Address 2",
                "country_id" => $data['country_id'] ?? "154",
                "url" => $data['url'] ?? ""
            ];

            $contact = \Acelle\Model\Contact::where('email', $contactData['email'])->first();

            if ($contact) {
                $contact->update($contactData);
                Log::info("Updated contact for email: {$contactData['email']}");
            } else {
                $contact = \Acelle\Model\Contact::create($contactData);
                Log::info("Created new contact for email: {$contactData['email']}");
            }

            return $contact->id;
        } catch (Exception $e) {
            Log::error('Error in get_contact: ' . $e->getMessage());
            throw $e;
        }
    }
}
